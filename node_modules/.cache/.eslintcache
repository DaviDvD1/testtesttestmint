[{"G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\index.tsx":"1","G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\reportWebVitals.ts":"2","G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\App.tsx":"3","G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\Home.tsx":"4","G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\hooks\\usePoller.js":"5","G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\candy-machine.ts":"6","G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\utils\\checkWLToken.ts":"7","G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\Header.tsx":"8","G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\MintButton.tsx":"9","G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\utils.ts":"10","G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\MintCountdown.tsx":"11","G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\connection.tsx":"12"},{"size":520,"mtime":1644688712971,"results":"13","hashOfConfig":"14"},{"size":440,"mtime":1644688712972,"results":"15","hashOfConfig":"14"},{"size":2367,"mtime":1644688712969,"results":"16","hashOfConfig":"14"},{"size":8800,"mtime":1644853718982,"results":"17","hashOfConfig":"14"},{"size":524,"mtime":1644688712971,"results":"18","hashOfConfig":"14"},{"size":13440,"mtime":1644688712970,"results":"19","hashOfConfig":"14"},{"size":1886,"mtime":1644688712973,"results":"20","hashOfConfig":"14"},{"size":2711,"mtime":1644688712970,"results":"21","hashOfConfig":"14"},{"size":2238,"mtime":1644688712970,"results":"22","hashOfConfig":"14"},{"size":3340,"mtime":1644688712972,"results":"23","hashOfConfig":"14"},{"size":2898,"mtime":1644688712970,"results":"24","hashOfConfig":"14"},{"size":15100,"mtime":1644688712971,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"i3wywz",{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\index.tsx",[],"G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\reportWebVitals.ts",[],"G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\App.tsx",[],"G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\Home.tsx",[],"G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\hooks\\usePoller.js",["53"],"import { useEffect, useRef } from 'react';\r\nexport function usePoller(fn, delay) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest fn.\r\n  useEffect(() => {\r\n    savedCallback.current = fn;\r\n  }, [fn]);\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n  //run at start too\r\n  useEffect(() => {\r\n    fn()\r\n  }, []);\r\n}\r\n","G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\candy-machine.ts",[],"G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\utils\\checkWLToken.ts",["54","55","56"],"import {\r\n  PublicKey,\r\n  Connection,\r\n  GetProgramAccountsConfig,\r\n  GetProgramAccountsFilter,\r\n  MemcmpFilter,\r\n  DataSizeFilter,\r\n} from \"@solana/web3.js\";\r\n// @ts-ignore\r\nimport fetch from \"node-fetch\";\r\nimport { AnchorWallet } from \"@solana/wallet-adapter-react\";\r\n\r\nvar tempData: any;\r\n\r\n/* const METADATA_PUBKEY = new PublicKey(\r\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n) */\r\nconst TOKEN_PUBKEY = new PublicKey(\r\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\r\n);\r\n\r\n//export async function getNft()\r\n\r\nexport const checkWLToken = async (\r\n  connection: Connection,\r\n  userAddress: any,\r\n  wltTokenAddress: any\r\n): Promise<any> => {\r\n  try {\r\n    let filter: MemcmpFilter = {\r\n      memcmp: {\r\n        offset: 32,\r\n        bytes: userAddress?.toBase58(),\r\n      },\r\n    };\r\n    let filter2: DataSizeFilter = {\r\n      dataSize: 165,\r\n    };\r\n    let getFilter: GetProgramAccountsFilter[] = [filter, filter2];\r\n    let programAccountsConfig: GetProgramAccountsConfig = {\r\n      filters: getFilter,\r\n    };\r\n    let _listOfTokens = await connection.getProgramAccounts(\r\n      TOKEN_PUBKEY,\r\n      programAccountsConfig\r\n    );\r\n\r\n    // we get frist 32 bytes as per\r\n    // https://github.com/solana-labs/solana-program-library/blob/08d9999f997a8bf38719679be9d572f119d0d960/token/program/src/state.rs#L86-L106\r\n    // mint is the first hence we start at 0 byte\r\n    let arrayOfTokens = [];\r\n    for (let i = 0; i < _listOfTokens.length; i++) {\r\n      let _mint = new PublicKey(\r\n        _listOfTokens[i][\"account\"][\"data\"].slice(0, 32)\r\n      );\r\n\r\n      arrayOfTokens.push(_mint.toBase58());\r\n    }\r\n\r\n    let userHasWhitelistToken;\r\n    arrayOfTokens.includes(wltTokenAddress.toBase58())\r\n      ? (userHasWhitelistToken = true)\r\n      : (userHasWhitelistToken = false);\r\n\r\n    return userHasWhitelistToken;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\n//getNft()\r\n","G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\Header.tsx",["57"],"import * as anchor from '@project-serum/anchor';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { MintCountdown } from './MintCountdown';\r\nimport { toDate, formatNumber } from './utils';\r\nimport { CandyMachineAccount } from './candy-machine';\r\n\r\ntype HeaderProps = {\r\n  candyMachine?: CandyMachineAccount;\r\n};\r\n\r\nexport const Header = ({ candyMachine, refreshCandyMachineState }: {candyMachine?: CandyMachineAccount; refreshCandyMachineState: any }) => {\r\n  return (\r\n    <Grid container direction=\"row\" justifyContent=\"center\" wrap=\"nowrap\">\r\n      <Grid container direction=\"row\" wrap=\"nowrap\">\r\n        {candyMachine && (\r\n          <Grid container direction=\"row\" wrap=\"nowrap\">\r\n            <Grid container direction=\"column\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                Remaining\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"textPrimary\"\r\n                style={{\r\n                  fontWeight: 'bold',\r\n                }}\r\n              >\r\n                {`${candyMachine?.state.itemsRemaining}`}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid container direction=\"column\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                Price\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"textPrimary\"\r\n                style={{ fontWeight: 'bold' }}\r\n              >\r\n                {getMintPrice(candyMachine)}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n        <MintCountdown\r\n          date={toDate(\r\n            candyMachine?.state.goLiveDate\r\n              ? candyMachine?.state.goLiveDate\r\n              : candyMachine?.state.isPresale\r\n              ? new anchor.BN(new Date().getTime() / 1000)\r\n              : undefined,\r\n          )}\r\n          style={{ justifyContent: 'flex-end' }}\r\n          status={\r\n            !candyMachine?.state?.isActive || candyMachine?.state?.isSoldOut\r\n              ? 'COMPLETED'\r\n              : candyMachine?.state.isPresale\r\n              ? 'PRESALE'\r\n              : 'LIVE'\r\n          }\r\n          refreshCandyMachineState={refreshCandyMachineState}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst getMintPrice = (candyMachine: CandyMachineAccount): string => {\r\n  const price = formatNumber.asNumber(\r\n    candyMachine.state.isPresale && candyMachine.state.whitelistMintSettings?.discountPrice\r\n      ? candyMachine.state.whitelistMintSettings?.discountPrice!\r\n      : candyMachine.state.price!,\r\n  );\r\n  return `â—Ž ${price}`;\r\n};\r\n","G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\MintButton.tsx",[],"G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\utils.ts",[],"G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\MintCountdown.tsx",[],"G:\\NFT PROJECT\\CANDY MACHINE DEVNET\\SnakeRS devnet\\src\\connection.tsx",[],{"ruleId":"58","severity":1,"message":"59","line":21,"column":6,"nodeType":"60","endLine":21,"endColumn":8,"suggestions":"61"},{"ruleId":"62","severity":1,"message":"63","line":10,"column":8,"nodeType":"64","messageId":"65","endLine":10,"endColumn":13},{"ruleId":"62","severity":1,"message":"66","line":11,"column":10,"nodeType":"64","messageId":"65","endLine":11,"endColumn":22},{"ruleId":"62","severity":1,"message":"67","line":13,"column":5,"nodeType":"64","messageId":"65","endLine":13,"endColumn":18},{"ruleId":"62","severity":1,"message":"68","line":9,"column":6,"nodeType":"64","messageId":"65","endLine":9,"endColumn":17},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fn'. Either include it or remove the dependency array. If 'fn' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["69"],"@typescript-eslint/no-unused-vars","'fetch' is defined but never used.","Identifier","unusedVar","'AnchorWallet' is defined but never used.","'tempData' is defined but never used.","'HeaderProps' is defined but never used.",{"desc":"70","fix":"71"},"Update the dependencies array to be: [fn]",{"range":"72","text":"73"},[515,517],"[fn]"]
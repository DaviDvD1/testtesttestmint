{"ast":null,"code":"import { PublicKey } from \"@solana/web3.js\"; // @ts-ignore\n\nvar tempData;\n/* const METADATA_PUBKEY = new PublicKey(\r\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n) */\n\nconst TOKEN_PUBKEY = new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"); //export async function getNft()\n\nexport const checkWLToken = async (connection, userAddress, wltTokenAddress) => {\n  try {\n    let filter = {\n      memcmp: {\n        offset: 32,\n        bytes: userAddress === null || userAddress === void 0 ? void 0 : userAddress.toBase58()\n      }\n    };\n    let filter2 = {\n      dataSize: 165\n    };\n    let getFilter = [filter, filter2];\n    let programAccountsConfig = {\n      filters: getFilter\n    };\n\n    let _listOfTokens = await connection.getProgramAccounts(TOKEN_PUBKEY, programAccountsConfig); // we get frist 32 bytes as per\n    // https://github.com/solana-labs/solana-program-library/blob/08d9999f997a8bf38719679be9d572f119d0d960/token/program/src/state.rs#L86-L106\n    // mint is the first hence we start at 0 byte\n\n\n    let arrayOfTokens = [];\n\n    for (let i = 0; i < _listOfTokens.length; i++) {\n      let _mint = new PublicKey(_listOfTokens[i][\"account\"][\"data\"].slice(0, 32));\n\n      arrayOfTokens.push(_mint.toBase58());\n    }\n\n    let userHasWhitelistToken;\n    arrayOfTokens.includes(wltTokenAddress.toBase58()) ? userHasWhitelistToken = true : userHasWhitelistToken = false;\n    return userHasWhitelistToken;\n  } catch (e) {\n    console.log(e);\n  }\n}; //getNft()","map":{"version":3,"sources":["G:/NFT PROJECT/CANDY MACHINE DEVNET/SnakeRS devnet/src/utils/checkWLToken.ts"],"names":["PublicKey","tempData","TOKEN_PUBKEY","checkWLToken","connection","userAddress","wltTokenAddress","filter","memcmp","offset","bytes","toBase58","filter2","dataSize","getFilter","programAccountsConfig","filters","_listOfTokens","getProgramAccounts","arrayOfTokens","i","length","_mint","slice","push","userHasWhitelistToken","includes","e","console","log"],"mappings":"AAAA,SACEA,SADF,QAOO,iBAPP,C,CAQA;;AAIA,IAAIC,QAAJ;AAEA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,IAAIF,SAAJ,CACnB,6CADmB,CAArB,C,CAIA;;AAEA,OAAO,MAAMG,YAAY,GAAG,OAC1BC,UAD0B,EAE1BC,WAF0B,EAG1BC,eAH0B,KAIT;AACjB,MAAI;AACF,QAAIC,MAAoB,GAAG;AACzBC,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAE,EADF;AAENC,QAAAA,KAAK,EAAEL,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEM,QAAb;AAFD;AADiB,KAA3B;AAMA,QAAIC,OAAuB,GAAG;AAC5BC,MAAAA,QAAQ,EAAE;AADkB,KAA9B;AAGA,QAAIC,SAAqC,GAAG,CAACP,MAAD,EAASK,OAAT,CAA5C;AACA,QAAIG,qBAA+C,GAAG;AACpDC,MAAAA,OAAO,EAAEF;AAD2C,KAAtD;;AAGA,QAAIG,aAAa,GAAG,MAAMb,UAAU,CAACc,kBAAX,CACxBhB,YADwB,EAExBa,qBAFwB,CAA1B,CAdE,CAmBF;AACA;AACA;;;AACA,QAAII,aAAa,GAAG,EAApB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,aAAa,CAACI,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,UAAIE,KAAK,GAAG,IAAItB,SAAJ,CACViB,aAAa,CAACG,CAAD,CAAb,CAAiB,SAAjB,EAA4B,MAA5B,EAAoCG,KAApC,CAA0C,CAA1C,EAA6C,EAA7C,CADU,CAAZ;;AAIAJ,MAAAA,aAAa,CAACK,IAAd,CAAmBF,KAAK,CAACX,QAAN,EAAnB;AACD;;AAED,QAAIc,qBAAJ;AACAN,IAAAA,aAAa,CAACO,QAAd,CAAuBpB,eAAe,CAACK,QAAhB,EAAvB,IACKc,qBAAqB,GAAG,IAD7B,GAEKA,qBAAqB,GAAG,KAF7B;AAIA,WAAOA,qBAAP;AACD,GArCD,CAqCE,OAAOE,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF,CA7CM,C,CA+CP","sourcesContent":["import {\r\n  PublicKey,\r\n  Connection,\r\n  GetProgramAccountsConfig,\r\n  GetProgramAccountsFilter,\r\n  MemcmpFilter,\r\n  DataSizeFilter,\r\n} from \"@solana/web3.js\";\r\n// @ts-ignore\r\nimport fetch from \"node-fetch\";\r\nimport { AnchorWallet } from \"@solana/wallet-adapter-react\";\r\n\r\nvar tempData: any;\r\n\r\n/* const METADATA_PUBKEY = new PublicKey(\r\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n) */\r\nconst TOKEN_PUBKEY = new PublicKey(\r\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\r\n);\r\n\r\n//export async function getNft()\r\n\r\nexport const checkWLToken = async (\r\n  connection: Connection,\r\n  userAddress: any,\r\n  wltTokenAddress: any\r\n): Promise<any> => {\r\n  try {\r\n    let filter: MemcmpFilter = {\r\n      memcmp: {\r\n        offset: 32,\r\n        bytes: userAddress?.toBase58(),\r\n      },\r\n    };\r\n    let filter2: DataSizeFilter = {\r\n      dataSize: 165,\r\n    };\r\n    let getFilter: GetProgramAccountsFilter[] = [filter, filter2];\r\n    let programAccountsConfig: GetProgramAccountsConfig = {\r\n      filters: getFilter,\r\n    };\r\n    let _listOfTokens = await connection.getProgramAccounts(\r\n      TOKEN_PUBKEY,\r\n      programAccountsConfig\r\n    );\r\n\r\n    // we get frist 32 bytes as per\r\n    // https://github.com/solana-labs/solana-program-library/blob/08d9999f997a8bf38719679be9d572f119d0d960/token/program/src/state.rs#L86-L106\r\n    // mint is the first hence we start at 0 byte\r\n    let arrayOfTokens = [];\r\n    for (let i = 0; i < _listOfTokens.length; i++) {\r\n      let _mint = new PublicKey(\r\n        _listOfTokens[i][\"account\"][\"data\"].slice(0, 32)\r\n      );\r\n\r\n      arrayOfTokens.push(_mint.toBase58());\r\n    }\r\n\r\n    let userHasWhitelistToken;\r\n    arrayOfTokens.includes(wltTokenAddress.toBase58())\r\n      ? (userHasWhitelistToken = true)\r\n      : (userHasWhitelistToken = false);\r\n\r\n    return userHasWhitelistToken;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\n//getNft()\r\n"]},"metadata":{},"sourceType":"module"}
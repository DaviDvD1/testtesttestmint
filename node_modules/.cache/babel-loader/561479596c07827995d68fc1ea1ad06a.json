{"ast":null,"code":"import _asyncToGenerator from\"G:/NFT PROJECT/CANDY MACHINE DEVNET/SnakeRS devnet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"G:\\\\NFT PROJECT\\\\CANDY MACHINE DEVNET\\\\SnakeRS devnet\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import{PublicKey}from\"@solana/web3.js\";// @ts-ignore\nvar tempData;/* const METADATA_PUBKEY = new PublicKey(\r\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n) */var TOKEN_PUBKEY=new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\");//export async function getNft()\nexport var checkWLToken=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection,userAddress,wltTokenAddress){var filter,filter2,getFilter,programAccountsConfig,_listOfTokens,arrayOfTokens,i,_mint,userHasWhitelistToken;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;filter={memcmp:{offset:32,bytes:userAddress===null||userAddress===void 0?void 0:userAddress.toBase58()}};filter2={dataSize:165};getFilter=[filter,filter2];programAccountsConfig={filters:getFilter};_context.next=7;return connection.getProgramAccounts(TOKEN_PUBKEY,programAccountsConfig);case 7:_listOfTokens=_context.sent;// we get frist 32 bytes as per\n// https://github.com/solana-labs/solana-program-library/blob/08d9999f997a8bf38719679be9d572f119d0d960/token/program/src/state.rs#L86-L106\n// mint is the first hence we start at 0 byte\narrayOfTokens=[];for(i=0;i<_listOfTokens.length;i++){_mint=new PublicKey(_listOfTokens[i][\"account\"][\"data\"].slice(0,32));arrayOfTokens.push(_mint.toBase58());}arrayOfTokens.includes(wltTokenAddress.toBase58())?userHasWhitelistToken=true:userHasWhitelistToken=false;return _context.abrupt(\"return\",userHasWhitelistToken);case 14:_context.prev=14;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 17:case\"end\":return _context.stop();}}},_callee,null,[[0,14]]);}));return function checkWLToken(_x,_x2,_x3){return _ref.apply(this,arguments);};}();//getNft()","map":{"version":3,"sources":["G:/NFT PROJECT/CANDY MACHINE DEVNET/SnakeRS devnet/src/utils/checkWLToken.ts"],"names":["PublicKey","tempData","TOKEN_PUBKEY","checkWLToken","connection","userAddress","wltTokenAddress","filter","memcmp","offset","bytes","toBase58","filter2","dataSize","getFilter","programAccountsConfig","filters","getProgramAccounts","_listOfTokens","arrayOfTokens","i","length","_mint","slice","push","includes","userHasWhitelistToken","console","log"],"mappings":"2RAAA,OACEA,SADF,KAOO,iBAPP,CAQA;AAIA,GAAIC,CAAAA,QAAJ,CAEA;AACA;AACA,IACA,GAAMC,CAAAA,YAAY,CAAG,GAAIF,CAAAA,SAAJ,CACnB,6CADmB,CAArB,CAIA;AAEA,MAAO,IAAMG,CAAAA,YAAY,0FAAG,iBAC1BC,UAD0B,CAE1BC,WAF0B,CAG1BC,eAH0B,+OAMpBC,MANoB,CAMG,CACzBC,MAAM,CAAE,CACNC,MAAM,CAAE,EADF,CAENC,KAAK,CAAEL,WAAF,SAAEA,WAAF,iBAAEA,WAAW,CAAEM,QAAb,EAFD,CADiB,CANH,CAYpBC,OAZoB,CAYM,CAC5BC,QAAQ,CAAE,GADkB,CAZN,CAepBC,SAfoB,CAeoB,CAACP,MAAD,CAASK,OAAT,CAfpB,CAgBpBG,qBAhBoB,CAgB8B,CACpDC,OAAO,CAAEF,SAD2C,CAhB9B,uBAmBEV,CAAAA,UAAU,CAACa,kBAAX,CACxBf,YADwB,CAExBa,qBAFwB,CAnBF,QAmBpBG,aAnBoB,eAwBxB;AACA;AACA;AACIC,aA3BoB,CA2BJ,EA3BI,CA4BxB,IAASC,CAAT,CAAa,CAAb,CAAgBA,CAAC,CAAGF,aAAa,CAACG,MAAlC,CAA0CD,CAAC,EAA3C,CAA+C,CACzCE,KADyC,CACjC,GAAItB,CAAAA,SAAJ,CACVkB,aAAa,CAACE,CAAD,CAAb,CAAiB,SAAjB,EAA4B,MAA5B,EAAoCG,KAApC,CAA0C,CAA1C,CAA6C,EAA7C,CADU,CADiC,CAK7CJ,aAAa,CAACK,IAAd,CAAmBF,KAAK,CAACX,QAAN,EAAnB,EACD,CAGDQ,aAAa,CAACM,QAAd,CAAuBnB,eAAe,CAACK,QAAhB,EAAvB,EACKe,qBAAqB,CAAG,IAD7B,CAEKA,qBAAqB,CAAG,KAF7B,CArCwB,gCAyCjBA,qBAzCiB,4DA2CxBC,OAAO,CAACC,GAAR,cA3CwB,qEAAH,kBAAZzB,CAAAA,YAAY,oDAAlB,CA+CP","sourcesContent":["import {\r\n  PublicKey,\r\n  Connection,\r\n  GetProgramAccountsConfig,\r\n  GetProgramAccountsFilter,\r\n  MemcmpFilter,\r\n  DataSizeFilter,\r\n} from \"@solana/web3.js\";\r\n// @ts-ignore\r\nimport fetch from \"node-fetch\";\r\nimport { AnchorWallet } from \"@solana/wallet-adapter-react\";\r\n\r\nvar tempData: any;\r\n\r\n/* const METADATA_PUBKEY = new PublicKey(\r\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n) */\r\nconst TOKEN_PUBKEY = new PublicKey(\r\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\r\n);\r\n\r\n//export async function getNft()\r\n\r\nexport const checkWLToken = async (\r\n  connection: Connection,\r\n  userAddress: any,\r\n  wltTokenAddress: any\r\n): Promise<any> => {\r\n  try {\r\n    let filter: MemcmpFilter = {\r\n      memcmp: {\r\n        offset: 32,\r\n        bytes: userAddress?.toBase58(),\r\n      },\r\n    };\r\n    let filter2: DataSizeFilter = {\r\n      dataSize: 165,\r\n    };\r\n    let getFilter: GetProgramAccountsFilter[] = [filter, filter2];\r\n    let programAccountsConfig: GetProgramAccountsConfig = {\r\n      filters: getFilter,\r\n    };\r\n    let _listOfTokens = await connection.getProgramAccounts(\r\n      TOKEN_PUBKEY,\r\n      programAccountsConfig\r\n    );\r\n\r\n    // we get frist 32 bytes as per\r\n    // https://github.com/solana-labs/solana-program-library/blob/08d9999f997a8bf38719679be9d572f119d0d960/token/program/src/state.rs#L86-L106\r\n    // mint is the first hence we start at 0 byte\r\n    let arrayOfTokens = [];\r\n    for (let i = 0; i < _listOfTokens.length; i++) {\r\n      let _mint = new PublicKey(\r\n        _listOfTokens[i][\"account\"][\"data\"].slice(0, 32)\r\n      );\r\n\r\n      arrayOfTokens.push(_mint.toBase58());\r\n    }\r\n\r\n    let userHasWhitelistToken;\r\n    arrayOfTokens.includes(wltTokenAddress.toBase58())\r\n      ? (userHasWhitelistToken = true)\r\n      : (userHasWhitelistToken = false);\r\n\r\n    return userHasWhitelistToken;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\n//getNft()\r\n"]},"metadata":{},"sourceType":"module"}
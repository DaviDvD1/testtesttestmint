{"ast":null,"code":"var _jsxFileName = \"G:\\\\NFT PROJECT\\\\CANDY MACHINE DEVNET\\\\SnakeRS devnet\\\\src\\\\Home.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport { Container, Snackbar, CircularProgress } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport { awaitTransactionSignatureConfirmation, CANDY_MACHINE_PROGRAM, getCandyMachineState, mintOneToken } from \"./candy-machine\";\nimport { checkWLToken } from \"./utils/checkWLToken\";\nimport { Header } from \"./Header\";\nimport { MintButton } from \"./MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport { usePoller } from \"./hooks/usePoller\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst IMAGE_LINK = \"/animation.gif\";\nconst LOGO_LINK = \"/logo.png\";\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(29deg, #34342f 0%, #44c3a1 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n_c = ConnectButton;\nconst StyledPaper = styled(Paper)`\n  padding: 20px;\n  background: rgb(10,41,13);\n  background: radial-gradient(circle, rgba(10,41,13,1) 20%, rgba(0,0,0,1) 130%);\n  border-radius: 25px;\n  margin: 10px;\n`;\n_c2 = StyledPaper;\nconst MintContainer = styled.div``; // add your owns styles here\n\n_c3 = MintContainer;\n\nconst Home = props => {\n  _s();\n\n  var _candyMachine$state, _candyMachine$state$g;\n\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState();\n  const [userHasWhitelistToken, setUserHasWhitelistToken] = useState(false);\n  const [alertState, setAlertState] = useState({\n    open: false,\n    message: \"\",\n    severity: undefined\n  });\n  const [loading, setLoading] = useState(true);\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const anchorWallet = useMemo(() => {\n    if (!wallet || !wallet.publicKey || !wallet.signAllTransactions || !wallet.signTransaction) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction\n    };\n  }, [wallet]);\n  const refreshCandyMachineState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.candyMachineId) {\n      try {\n        var _cndy$state, _cndy$state$whitelist;\n\n        const cndy = await getCandyMachineState(anchorWallet, props.candyMachineId, props.connection);\n        setCandyMachine(cndy);\n        let WLToken = await checkWLToken(props.connection, anchorWallet.publicKey, cndy === null || cndy === void 0 ? void 0 : (_cndy$state = cndy.state) === null || _cndy$state === void 0 ? void 0 : (_cndy$state$whitelist = _cndy$state.whitelistMintSettings) === null || _cndy$state$whitelist === void 0 ? void 0 : _cndy$state$whitelist.mint);\n        WLToken ? setUserHasWhitelistToken(true) : setUserHasWhitelistToken(false);\n        setLoading(false);\n      } catch (e) {\n        console.log(\"There was a problem fetching Candy Machine state\");\n        console.log(e);\n      }\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection]);\n  var pollTime;\n  usePoller(() => {\n    refreshCandyMachineState();\n  }, pollTime ? pollTime : 9999);\n\n  const onMint = async () => {\n    try {\n      var _document$getElementB;\n\n      setIsUserMinting(true);\n      (_document$getElementB = document.getElementById(\"#identity\")) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.click();\n\n      if (wallet.connected && candyMachine !== null && candyMachine !== void 0 && candyMachine.program && wallet.publicKey) {\n        const mintTxId = (await mintOneToken(candyMachine, wallet.publicKey))[0];\n        let status = {\n          err: true\n        };\n\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(mintTxId, props.txTimeout, props.connection, true);\n        }\n\n        if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\"\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\"\n          });\n        }\n      }\n    } catch (error) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction Timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\"\n      });\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [anchorWallet, props.candyMachineId, props.connection, refreshCandyMachineState]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      style: {\n        marginTop: 30\n      },\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"sm\",\n        style: {\n          position: \"relative\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(StyledPaper, {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n            src: LOGO_LINK,\n            alt: \"\",\n            width: \"100%\",\n            style: {\n              borderRadius: \"5px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StyledPaper, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: IMAGE_LINK,\n              alt: \"\",\n              width: \"100%\",\n              style: {\n                borderRadius: \"50px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StyledPaper, {\n          children: !wallet.connected ? /*#__PURE__*/_jsxDEV(ConnectButton, {\n            children: \"Connect Wallet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this) : loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              justifyContent: \"center\",\n              width: \"100%\"\n            },\n            children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Header, {\n              candyMachine: candyMachine,\n              refreshCandyMachineState: refreshCandyMachineState\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(MintContainer, {\n              children: candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isActive && candyMachine !== null && candyMachine !== void 0 && candyMachine.state.gatekeeper && wallet.publicKey && wallet.signTransaction ? /*#__PURE__*/_jsxDEV(GatewayProvider, {\n                wallet: {\n                  publicKey: wallet.publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\n                  //@ts-ignore\n                  signTransaction: wallet.signTransaction\n                },\n                gatekeeperNetwork: candyMachine === null || candyMachine === void 0 ? void 0 : (_candyMachine$state = candyMachine.state) === null || _candyMachine$state === void 0 ? void 0 : (_candyMachine$state$g = _candyMachine$state.gatekeeper) === null || _candyMachine$state$g === void 0 ? void 0 : _candyMachine$state$g.gatekeeperNetwork,\n                clusterUrl: rpcUrl,\n                options: {\n                  autoShowModal: false\n                },\n                children: /*#__PURE__*/_jsxDEV(MintButton, {\n                  candyMachine: candyMachine,\n                  isMinting: isUserMinting,\n                  onMint: onMint,\n                  userHasWhitelistToken: userHasWhitelistToken\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(MintButton, {\n                candyMachine: candyMachine,\n                isMinting: isUserMinting,\n                onMint: onMint,\n                userHasWhitelistToken: userHasWhitelistToken\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n        open: alertState.open,\n        autoHideDuration: 6000,\n        onClose: () => setAlertState({ ...alertState,\n          open: false\n        }),\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          onClose: () => setAlertState({ ...alertState,\n            open: false\n          }),\n          severity: alertState.severity,\n          children: alertState.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Home, \"4ftPOxDBRFRrbh63OgckWnrzO9U=\", false, function () {\n  return [useWallet, usePoller];\n});\n\n_c4 = Home;\nexport default Home;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ConnectButton\");\n$RefreshReg$(_c2, \"StyledPaper\");\n$RefreshReg$(_c3, \"MintContainer\");\n$RefreshReg$(_c4, \"Home\");","map":{"version":3,"sources":["G:/NFT PROJECT/CANDY MACHINE DEVNET/SnakeRS devnet/src/Home.tsx"],"names":["useEffect","useMemo","useState","useCallback","styled","Container","Snackbar","CircularProgress","Paper","Alert","PublicKey","useWallet","WalletDialogButton","awaitTransactionSignatureConfirmation","CANDY_MACHINE_PROGRAM","getCandyMachineState","mintOneToken","checkWLToken","Header","MintButton","GatewayProvider","usePoller","IMAGE_LINK","LOGO_LINK","ConnectButton","StyledPaper","MintContainer","div","Home","props","isUserMinting","setIsUserMinting","candyMachine","setCandyMachine","userHasWhitelistToken","setUserHasWhitelistToken","alertState","setAlertState","open","message","severity","undefined","loading","setLoading","rpcUrl","rpcHost","wallet","anchorWallet","publicKey","signAllTransactions","signTransaction","refreshCandyMachineState","candyMachineId","cndy","connection","WLToken","state","whitelistMintSettings","mint","e","console","log","pollTime","onMint","document","getElementById","click","connected","program","mintTxId","status","err","txTimeout","error","msg","indexOf","code","window","location","reload","marginTop","position","borderRadius","display","justifyContent","width","isActive","gatekeeper","gatekeeperNetwork","autoShowModal"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState, useCallback } from \"react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { Container, Snackbar, CircularProgress } from \"@material-ui/core\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\nimport { useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CandyMachineAccount,\r\n  CANDY_MACHINE_PROGRAM,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n} from \"./candy-machine\";\r\nimport { AlertState } from \"./utils\";\r\nimport {checkWLToken } from \"./utils/checkWLToken\"\r\nimport { Header } from \"./Header\";\r\nimport { MintButton } from \"./MintButton\";\r\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\r\nimport { usePoller } from \"./hooks/usePoller\";\r\n\r\nconst IMAGE_LINK = \"/animation.gif\";\r\nconst LOGO_LINK = \"/logo.png\";\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(29deg, #34342f 0%, #44c3a1 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst StyledPaper = styled(Paper)`\r\n  padding: 20px;\r\n  background: rgb(10,41,13);\r\n  background: radial-gradient(circle, rgba(10,41,13,1) 20%, rgba(0,0,0,1) 130%);\r\n  border-radius: 25px;\r\n  margin: 10px;\r\n`;\r\nconst MintContainer = styled.div``; // add your owns styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  startDate: number;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [isUserMinting, setIsUserMinting] = useState(false);\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n  const [userHasWhitelistToken, setUserHasWhitelistToken] = useState(false)\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n  const [loading, setLoading] = useState(true);\r\n  const rpcUrl = props.rpcHost;\r\n  const wallet = useWallet();\r\n\r\n  const anchorWallet = useMemo(() => {\r\n    if (\r\n      !wallet ||\r\n      !wallet.publicKey ||\r\n      !wallet.signAllTransactions ||\r\n      !wallet.signTransaction\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    } as anchor.Wallet;\r\n  }, [wallet]);\r\n\r\n  const refreshCandyMachineState = useCallback(async () => {\r\n    if (!anchorWallet ) {\r\n      return;\r\n    }\r\n\r\n    if (props.candyMachineId) {\r\n      try {\r\n        const cndy = await getCandyMachineState(\r\n          anchorWallet,\r\n          props.candyMachineId,\r\n          props.connection\r\n        );\r\n        setCandyMachine(cndy);\r\n        let WLToken = await checkWLToken(props.connection,anchorWallet.publicKey, cndy?.state?.whitelistMintSettings?.mint)\r\n        WLToken ? setUserHasWhitelistToken(true) : setUserHasWhitelistToken(false);\r\n        setLoading(false);\r\n      } catch (e) {\r\n        console.log(\"There was a problem fetching Candy Machine state\");\r\n        console.log(e);\r\n      }\r\n    }\r\n  }, [anchorWallet, props.candyMachineId, props.connection]);\r\n  var pollTime;\r\n  usePoller(\r\n    () => {\r\n      refreshCandyMachineState();\r\n    },\r\n    pollTime ? pollTime : 9999\r\n  );\r\n  const onMint = async () => {\r\n    try {\r\n      setIsUserMinting(true);\r\n      document.getElementById(\"#identity\")?.click();\r\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n        const mintTxId = (\r\n          await mintOneToken(candyMachine, wallet.publicKey)\r\n        )[0];\r\n\r\n        let status: any = { err: true };\r\n        if (mintTxId) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            true\r\n          );\r\n        }\r\n\r\n        if (status && !status.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Mint succeeded!\",\r\n            severity: \"success\",\r\n          });\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Mint failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = \"Transaction Timeout! Please try again.\";\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n          window.location.reload();\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      setIsUserMinting(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshCandyMachineState();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    refreshCandyMachineState,\r\n  ]);\r\n\r\n  return (\r\n    <>\r\n      <Container style={{ marginTop: 30 }}>\r\n        <Container maxWidth=\"sm\" style={{ position: \"relative\" }}>\r\n          <StyledPaper>\r\n            {\" \"}\r\n            <img\r\n              src={LOGO_LINK}\r\n              alt=\"\"\r\n              width=\"100%\"\r\n              style={{ borderRadius: \"5px\" }}\r\n            />\r\n          </StyledPaper>\r\n          <StyledPaper>\r\n            <div>\r\n              <img\r\n                src={IMAGE_LINK}\r\n                alt=\"\"\r\n                width=\"100%\"\r\n                style={{ borderRadius: \"50px\" }}\r\n              />\r\n            </div>\r\n          </StyledPaper>\r\n\r\n          <StyledPaper>\r\n            {!wallet.connected ? (\r\n              <ConnectButton>Connect Wallet</ConnectButton>\r\n            ) : loading ? (\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  width: \"100%\",\r\n                }}\r\n              >\r\n                <CircularProgress />\r\n              </div>\r\n            ) : (\r\n              <>\r\n                <Header candyMachine={candyMachine} refreshCandyMachineState={refreshCandyMachineState} />\r\n                <MintContainer>\r\n                  {candyMachine?.state.isActive &&\r\n                  candyMachine?.state.gatekeeper &&\r\n                  wallet.publicKey &&\r\n                  wallet.signTransaction ? (\r\n                    <GatewayProvider\r\n                      wallet={{\r\n                        publicKey:\r\n                          wallet.publicKey ||\r\n                          new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                        //@ts-ignore\r\n                        signTransaction: wallet.signTransaction,\r\n                      }}\r\n                      gatekeeperNetwork={\r\n                        candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                      }\r\n                      clusterUrl={rpcUrl}\r\n                      options={{ autoShowModal: false }}\r\n                    >\r\n                      <MintButton\r\n                        candyMachine={candyMachine}\r\n                        isMinting={isUserMinting}\r\n                        onMint={onMint}\r\n                        userHasWhitelistToken={userHasWhitelistToken}\r\n                      />\r\n                    </GatewayProvider>\r\n                  ) : (\r\n                    <MintButton\r\n                      candyMachine={candyMachine}\r\n                      isMinting={isUserMinting}\r\n                      onMint={onMint}\r\n                      userHasWhitelistToken={userHasWhitelistToken}\r\n                    />\r\n                  )}\r\n                </MintContainer>\r\n              </>\r\n            )}\r\n          </StyledPaper>\r\n        </Container>\r\n\r\n        <Snackbar\r\n          open={alertState.open}\r\n          autoHideDuration={6000}\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n        >\r\n          <Alert\r\n            onClose={() => setAlertState({ ...alertState, open: false })}\r\n            severity={alertState.severity}\r\n          >\r\n            {alertState.message}\r\n          </Alert>\r\n        </Snackbar>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}